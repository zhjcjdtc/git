18.12.2:
搭建GIT环境，在安装完GIT后，要在命令行设置：
打开git bash
git config --global user.name "zhonghongjie"
git config --global user.email "zhjcjdtc@163.com"
创建一个库目录，在当前目录下输入：git init即可将这个目录设置成GIT库
编辑的文件保存在这个库目录（工作区）的前提下，git add 文件名即可将这个文件添加到GIT库暂存区中
git commit -m "xxx" 即可提交修改，即存于GIT库中，xxx为注释，可以描述你作了什么修改
git status可以看文件当前的状态（看有没有文件被修改），git diff 可以查看具体改了哪些内容（还没被提交的修改）
git log 可以看历史记录 git log --pretty=oneline 可以简化历史记录
git reset --hard HEAD^可以回退到上一版本，HEAD^^就是上上个版本，HEAD~100就是上100个版本，HEAD是当前版本
HEAD^可以用具体的版本号代替，即可回退或者返回最新的版本
git reflog可以看每一次命令操作，从中可以看到各个操作后的版本号，因此可以任意的回退或返回
HEAD版本号所指的文件是库目录下所有的文件当前的版本，它指的不是库目录下某一文件的版本号，如果上一版本到这一版本修改提交了两个
文件，那么回退上一版本会把两个文件都回退了，不能针对某一文件作单独的回退。
文件目录下即为工作区，git add 即为添加修改到暂存区，git commit 即为将修改提交到版本库
丢弃工作区的修改：git checkout -- xxx xxx为文件名
如果已经到暂存区：git reset HEAD xxx xxx为文件名，HEAD表示最新版本，即可将修改回退到工作区，再用git checkout -- xxx就可以了。
若将版本已经提交到版本库了，可以用之前的回退方法。
rm xxx xxx为文件名  可以删除工作区中的文件，但是版本库中还在
git rm xxx xxx为文件名 再git commit 可以删除版本库中的文件
如果不小心把工作区中文件误删了，可以用git checkout -- xxx xxx为文件名 恢复文件 
git checkout命令其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
可以用github网站作为远程仓库，如果主目录下没有.ssh目录，则要创建一个：ssh-keygen -t rsa -C "zhjcjdtc@163.com"这是为了加密
创建好了以后会在用户主目录下有个.ssh目录，目录中有id_rsa和id_rsa.pub两个文件，这就是密钥对，id_rsa是私钥，不能告诉别人，
id_rsa.pub是公钥，可以告诉别人
登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容，点“Add Key”，你就应该看到已经添加的Key

18.12.3
在GITHUB上创建远程仓库：
首先，在GITHUB上CREATE A NEW REPOSITORY，然后输入库名（和本地库文件夹名一致即可），然后创建。
接着   git remote add origin git@github.com:GITHUB账户名/库名.git  （此处的库名应该指的是远程库的库名，不过不确定，反正设置为
一致就OK）
然后   git push -u origin master 将本地库推送到远程库
最后   如果以后要推送，则git push origin master即可    第一次关联时，会有个警告，输入yes回车即可。
若不小心关联错了远程库，则git remote remove origin 即可删除关联，再重新关联即可
远程库克隆：首先创建远程库，输入库名，勾选Initialize this repository with a README   
然后git clone git@github.com:账户名/库名.git  在本地就会创建一个以库名为文件夹名的目录，里面有README.md文件
多人协作开发的情况下，可以用此方法从远程库克隆文件到本地。
GIT支持很多种协议，比如https和ssh，ssh速度较快

分支管理：
创建并切换到dev分支：git checkout -b dev（-b参数表示创建并切换）相当于：
git branch dev + git checkout dev
git branch 可以查看当前分支
在dev分支中的工作完成后并add和commit后，用git checkout master切换到master分支上，再用git merge dev将
dev分支上的工作成果合并到master分支上。合并完成后，可以用 git branch -d dev删掉dev分支

18.12.4:
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
用git log --graph命令可以看到分支合并图
git merge --no-ff -m "merge with no-ff" dev    
强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，
而fast forward合并就看不出来曾经做过合并
储存工作现场：git stash   查看工作现场：git stash list  
恢复工作现场：1、git stash apply    和 git stash drop  2、 git stash pop
你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
git stash apply stash@{0}

如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除

查看远程库的信息，用git remote，或者，用git remote -v显示更详细的信息

多人协作的工作模式通常是这样：
首先，可以试图用git push origin <branch-name>推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，
用命令git branch --set-upstream-to <branch-name> origin/<branch-name>
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致
自己可以模拟一个小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆
git clone git@github.com:账户名/库名.git，然后还要创建和远程分支对应的分支（master分支是默认创建的，如果有其他
分支要手动创建）
rebase操作可以把本地未push的分叉提交历史整理成直线（但是会造成本地的分叉提交已经被修改过了）；git rebase 后再push
rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比

18.12.5
想要在哪个分支上打标签先切换分支即可
命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id,在tagname后面加上 id 即可
命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；
命令git tag可以查看所有标签，标签不是按时间顺序列出，而是按字母排序的
git show <tagname>可以查看标签信息
命令git push origin <tagname>可以推送一个本地标签；
命令git push origin --tags可以推送全部未推送过的本地标签；
命令git tag -d <tagname>可以删除一个本地标签；
命令git push origin :refs/tags/<tagname>可以删除一个远程标签，删除远程标签前先把本地标签删除
如何参与一个开源项目呢？比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，
你可以访问它的项目主页https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，
然后，从自己的账号下clone：git clone git@github.com:michaelliao/bootstrap.git
一定要从自己的账号下clone仓库，这样你才能推送修改。
如果从bootstrap的作者的仓库地址git@github.com:twbs/bootstrap.git克隆，因为没有权限，你将不能推送修改。

如果感觉GITHUB速度慢，可以使用码云代替，可以同时在GITHUB和码云创建不同名称的远程库并关联就行   码云（gitee.com）
码云使用与GITHUB类似

让Git显示颜色，会让命令输出看起来更醒目：git config --global color.ui true

忽略某些文件时，需要编写.gitignore；
在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理

配置别名：我们只需要敲一行命令，告诉Git，以后st就表示status：git config --global alias.st status
--global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用
配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中
cat .git/config   可以查看    别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。
而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中
配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置

搭建Git服务器：需要准备一台运行Linux的机器，推荐用Ubuntu或Debian，输入一系列命令即可
要方便管理公钥，用Gitosis；
要像SVN那样变态地控制权限，用Gitolite





18.12.6  javascript
<script>
    alert('Hello, world');
</script>            放到head里
或者<head>
  <script src="/static/js/abc.js"></script>
</head>            两种方式均可以执行          //   或/*          */可以写注释
安装Chrome后，随便打开一个网页，然后点击菜单“查看(View)”-“开发者(Developer)”-“开发者工具(Developer Tools)”，
浏览器窗口就会一分为二，下方就是开发者工具 先点击“控制台(Console)“，在这个面板里可以直接输入JavaScript代码，按回车后执行。
要查看一个变量的内容，在Console中输入console.log(a);，回车后显示的值就是变量的内容。
关闭Console请点击右上角的“×”按钮。请熟练掌握Console的使用方法，在编写JavaScript代码时，经常需要在Console运行测试代码。
如果你对自己还有更高的要求，可以研究开发者工具的“源码(Sources)”，掌握断点、单步执行等高级调试技巧


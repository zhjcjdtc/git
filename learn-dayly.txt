18.12.2:
搭建GIT环境，在安装完GIT后，要在命令行设置：
打开git bash
git config --global user.name "zhonghongjie"
git config --global user.email "zhjcjdtc@163.com"
创建一个库目录，在当前目录下输入：git init即可将这个目录设置成GIT库
编辑的文件保存在这个库目录（工作区）的前提下，git add 文件名即可将这个文件添加到GIT库暂存区中
git commit -m "xxx" 即可提交修改，即存于GIT库中，xxx为注释，可以描述你作了什么修改
git status可以看文件当前的状态（看有没有文件被修改），git diff 可以查看具体改了哪些内容（还没被提交的修改）
git log 可以看历史记录 git log --pretty=oneline 可以简化历史记录
git reset --hard HEAD^可以回退到上一版本，HEAD^^就是上上个版本，HEAD~100就是上100个版本，HEAD是当前版本
HEAD^可以用具体的版本号代替，即可回退或者返回最新的版本
git reflog可以看每一次命令操作，从中可以看到各个操作后的版本号，因此可以任意的回退或返回
HEAD版本号所指的文件是库目录下所有的文件当前的版本，它指的不是库目录下某一文件的版本号，如果上一版本到这一版本修改提交了两个
文件，那么回退上一版本会把两个文件都回退了，不能针对某一文件作单独的回退。
文件目录下即为工作区，git add 即为添加修改到暂存区，git commit 即为将修改提交到版本库
丢弃工作区的修改：git checkout -- xxx xxx为文件名
如果已经到暂存区：git reset HEAD xxx xxx为文件名，HEAD表示最新版本，即可将修改回退到工作区，再用git checkout -- xxx就可以了。
若将版本已经提交到版本库了，可以用之前的回退方法。
rm xxx xxx为文件名  可以删除工作区中的文件，但是版本库中还在
git rm xxx xxx为文件名 再git commit 可以删除版本库中的文件
如果不小心把工作区中文件误删了，可以用git checkout -- xxx xxx为文件名 恢复文件 
git checkout命令其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
可以用github网站作为远程仓库，如果主目录下没有.ssh目录，则要创建一个：ssh-keygen -t rsa -C "zhjcjdtc@163.com"这是为了加密
创建好了以后会在用户主目录下有个.ssh目录，目录中有id_rsa和id_rsa.pub两个文件，这就是密钥对，id_rsa是私钥，不能告诉别人，
id_rsa.pub是公钥，可以告诉别人
登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容，点“Add Key”，你就应该看到已经添加的Key

18.12.3
在GITHUB上创建远程仓库：
首先，在GITHUB上CREATE A NEW REPOSITORY，然后输入库名（和本地库文件夹名一致即可），然后创建。
接着   git remote add origin git@github.com:GITHUB账户名/库名.git  （此处的库名应该指的是远程库的库名，不过不确定，反正设置为
一致就OK）
然后   git push -u origin master 将本地库推送到远程库
最后   如果以后要推送，则git push origin master即可    第一次关联时，会有个警告，输入yes回车即可。
若不小心关联错了远程库，则git remote remove origin 即可删除关联，再重新关联即可
远程库克隆：首先创建远程库，输入库名，勾选Initialize this repository with a README   
然后git clone git@github.com:账户名/库名.git  在本地就会创建一个以库名为文件夹名的目录，里面有README.md文件
多人协作开发的情况下，可以用此方法从远程库克隆文件到本地。
GIT支持很多种协议，比如https和ssh，ssh速度较快

分支管理：
创建并切换到dev分支：git checkout -b dev（-b参数表示创建并切换）相当于：
git branch dev + git checkout dev
git branch 可以查看当前分支
在dev分支中的工作完成后并add和commit后，用git checkout master切换到master分支上，再用git merge dev将
dev分支上的工作成果合并到master分支上。合并完成后，可以用 git branch -d dev删掉dev分支










